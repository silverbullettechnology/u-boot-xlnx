
#ifndef SRIO_DATA_PKTS_H
#define SRIO_DATA_PKTS_H

#include "xbasic_types.h"


// SRIO SWRITE addresses should be 64-bit aligned (i.e. last 3 bits are 0)

u32 swrite_pkt1 [] = {
	0x00000005,
	0x0000dea8, 0x00600000,    // SRIO address: 0xdea8
	0x10000008, 0xbeef0000,    // VITA IF Packet, size:8, streamID:0xbeef000
	0xdadada01, 0xefefef02,    // payload: 6 words
	0xdadada03, 0xefefef04,
	0xdadada05, 0xefefef06
};

u32 swrite_pkt2 [] = {
	0x00000005,
	0xbeef0120, 0x00600000,    // SRIO address: 0xbeef0120
	0x10000007, 0xbeef0000,    // VITA IF Packet, size:7, streamID:0xbeef000
	0x01010101, 0x02020202,    // payload: 5 words
	0x03030303, 0x04040404,
	0x05050505
};

// single vita packet is separated into two srio swrite packets
u32 swrite_pkt3a [] = {
	0x00000005,
	0x0000dea8, 0x00600000,    // SRIO address: 0xdea8
	0x10000008, 0xbeef0000,    // VITA IF Packet, size:8, streamID:0xbeef000
	0xdadada01, 0xefefef02,    // payload: 4 words
	0xdadada03, 0xefefef04,
};


u32 swrite_pkt3b [] = {
	0x00000005,
	0x0000dea8, 0x00600000,    // SRIO address: 0xdea8
	0x05050505, 0x06060606	   // remainder payload: 2 words
};

u32 swrite_pkt4 [] = {
	0x00000005,
	0xb0000600, 0x016020fa,   // SRIO address: 0xb0000600
	0x02020202, 0x02020202,   // no vita packet
	0x03030303, 0x03030303
};

u32 swrite_pkt5 [] = {
	0x00000005,
	0x0000dea8, 0x00600000,    // SRIO address: 0xdea8
	0x04040404, 0x04040404,    // no vita packet
	0x05050505, 0x05050505,
	0x06060606, 0x06060606,
	0x07070707, 0x07070707,
	0x08080808, 0x08080808,
	0x09090909, 0x09090909,
	0x0a0a0a0a, 0x0a0a0a0a,
	0x0b0b0b0b, 0x0b0b0b0b,
	0x0c0c0c0c, 0x0c0c0c0c,
	0x0d0d0d0d, 0x0d0d0d0d,
	0x0e0e0e0e, 0x0e0e0e0e,
	0x0f0f0f0f, 0x0f0f0f0f,
	0x10101010, 0x10101010,
	0x11111111, 0x11111111,
	0x12121212, 0x12121212,
	0x13131313, 0x13131313,
	0x14141414, 0x14141414,
	0x15151515, 0x15151515,
	0x16161616, 0x16161616,
	0x17171717, 0x17171717,
	0x18181818, 0x18181818,
	0x19191919, 0x19191919,
	0x1a1a1a1a, 0x1a1a1a1a,
	0x1b1b1b1b, 0x1b1b1b1b,
	0x1c1c1c1c, 0x1c1c1c1c,
	0x1d1d1d1d, 0x1d1d1d1d,
	0x1e1e1e1e, 0x1e1e1e1e,
	0x1f1f1f1f, 0x1f1f1f1f,
	0x20202020, 0x20202020,
	0x21212121, 0x21212121,
	0x22222222, 0x22222222,
	0x23232323, 0x23232323
};


u32 msg_pkt1 [] = {
	0x00000005,
	0x00000000, 0x22b02ff0, //msglen=2, msgseg=2, prio=1, size=256, mailbox=0, ltr=0
	0x04040404, 0x04040404,
	0x05050505, 0x05050505,
	0x06060606, 0x06060606,
	0x07070707, 0x07070707,
	0x08080808, 0x08080808,
	0x09090909, 0x09090909,
	0x0a0a0a0a, 0x0a0a0a0a,
	0x0b0b0b0b, 0x0b0b0b0b,
	0x0c0c0c0c, 0x0c0c0c0c,
	0x0d0d0d0d, 0x0d0d0d0d,
	0x0e0e0e0e, 0x0e0e0e0e,
	0x0f0f0f0f, 0x0f0f0f0f,
	0x10101010, 0x10101010,
	0x11111111, 0x11111111,
	0x12121212, 0x12121212,
	0x13131313, 0x13131313,
	0x14141414, 0x14141414,
	0x15151515, 0x15151515,
	0x16161616, 0x16161616,
	0x17171717, 0x17171717,
	0x18181818, 0x18181818,
	0x19191919, 0x19191919,
	0x1a1a1a1a, 0x1a1a1a1a,
	0x1b1b1b1b, 0x1b1b1b1b,
	0x1c1c1c1c, 0x1c1c1c1c,
	0x1d1d1d1d, 0x1d1d1d1d,
	0x1e1e1e1e, 0x1e1e1e1e,
	0x1f1f1f1f, 0x1f1f1f1f,
	0x20202020, 0x20202020,
	0x21212121, 0x21212121,
	0x22222222, 0x22222222,
	0x23232323, 0x23232323
};

u32 msg_pkt2 [] = {
	0x00000005,
	0x000000a1, 0x11b02070,  //msglen=1, msgseg=1, prio=1, size=8, mailbox=a, ltr=1
	0x15151515, 0x15151515
};

u32 msg_pkt3 [] = {
	0x00000005,
	0x000000a1, 0x00b020f0,  //msglen=0, msgseg=0, prio=1, size=16, mailbox=a, ltr=1
	0x15151515, 0x15151515,
	0xbeefbeef, 0xdeaddead
};


//response packet with data
u32 resp_pkt1 [] = {
	0x00000005,
	0x00000000, 0x22d02000, //targetid=22, prio=1, 
	0x04040404, 0x04040404,
	0x05050505, 0x05050505,
	0x06060606, 0x06060606,
	0x07070707, 0x07070707,
	0x08080808, 0x08080808,
	0x09090909, 0x09090909,
	0x0a0a0a0a, 0x0a0a0a0a,
	0x0b0b0b0b, 0x0b0b0b0b,
	0x0c0c0c0c, 0x0c0c0c0c,
	0x0d0d0d0d, 0x0d0d0d0d,
	0x0e0e0e0e, 0x0e0e0e0e,
	0x0f0f0f0f, 0x0f0f0f0f,
	0x10101010, 0x10101010,
	0x11111111, 0x11111111,
	0x12121212, 0x12121212,
	0x13131313, 0x13131313,
	0x14141414, 0x14141414,
	0x15151515, 0x15151515,
	0x16161616, 0x16161616,
	0x17171717, 0x17171717,
	0x18181818, 0x18181818,
	0x19191919, 0x19191919,
	0x1a1a1a1a, 0x1a1a1a1a,
	0x1b1b1b1b, 0x1b1b1b1b,
	0x1c1c1c1c, 0x1c1c1c1c,
	0x1d1d1d1d, 0x1d1d1d1d,
	0x1e1e1e1e, 0x1e1e1e1e,
	0x1f1f1f1f, 0x1f1f1f1f,
	0x20202020, 0x20202020,
	0x21212121, 0x21212121,
	0x22222222, 0x22222222,
	0x23232323, 0x23232323
};

// response packet without data
u32 resp_pkt2 [] = {
	0x00000005,
	0x00000000, 0x11d82008  //targetid=11, prio=1,, err=1
};

// message response packet
u32 resp_pkt3 [] = {
		0x00000005,
	0x00000000, 0x00d12000  //targetid=0, prio=1 
};





u32 testa [] = {
	0x11111111, 0xcccccccc,
	0x04040404, 0x04040400,
	0x05050505, 0x05050501,
	0x06060606, 0x06060602,
	0x07070707, 0x07070703,
	0x08080808, 0x08080804,
	0x09090909, 0x09090905,
	0x0a0a0a0a, 0x0a0a0a06,
	0x0b0b0b0b, 0x0b0b0b07,
	0x0c0c0c0c, 0x0c0c0c08,
	0x0d0d0d0d, 0x0d0d0d09,
	0x0e0e0e0e, 0x0e0e0e0a,
	0x0f0f0f0f, 0x0f0f0f0b,
	0x10101010, 0x1010101c,
	0x11111111, 0x1111111d,
	0x12121212, 0x1212121e,
	0x13131313, 0x1313131f,
	0x14141414, 0x14141410,
	0x15151515, 0x15151511,
	0x16161616, 0x16161612,
	0x17171717, 0x17171713,
	0x18181818, 0x18181814,
	0x19191919, 0x19191915,
	0x1a1a1a1a, 0x1a1a1a16,
	0x1b1b1b1b, 0x1b1b1b17,
	0x1c1c1c1c, 0x1c1c1c18,
	0x1d1d1d1d, 0x1d1d1d19,
	0x1e1e1e1e, 0x1e1e1e1a,
	0x1f1f1f1f, 0x1f1f1f1b,
	0x20202020, 0x2020202c,
	0x21212121, 0x2121212d,
	0x22222222, 0x2222222e,
	0x23232323, 0x2323232f
};

#endif 
